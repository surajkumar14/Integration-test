// Code generated by MockGen. DO NOT EDIT.
// Source: serviceB/models/protomodel/getrates_req_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	protomodel "serviceB/models/protomodel"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGetRatesServiceClient is a mock of GetRatesServiceClient interface.
type MockGetRatesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGetRatesServiceClientMockRecorder
}

// MockGetRatesServiceClientMockRecorder is the mock recorder for MockGetRatesServiceClient.
type MockGetRatesServiceClientMockRecorder struct {
	mock *MockGetRatesServiceClient
}

// NewMockGetRatesServiceClient creates a new mock instance.
func NewMockGetRatesServiceClient(ctrl *gomock.Controller) *MockGetRatesServiceClient {
	mock := &MockGetRatesServiceClient{ctrl: ctrl}
	mock.recorder = &MockGetRatesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRatesServiceClient) EXPECT() *MockGetRatesServiceClientMockRecorder {
	return m.recorder
}

// GetRates mocks base method.
func (m *MockGetRatesServiceClient) GetRates(ctx context.Context, in *protomodel.RatesRequest, opts ...grpc.CallOption) (*protomodel.RatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRates", varargs...)
	ret0, _ := ret[0].(*protomodel.RatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockGetRatesServiceClientMockRecorder) GetRates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockGetRatesServiceClient)(nil).GetRates), varargs...)
}

// MockGetRatesServiceServer is a mock of GetRatesServiceServer interface.
type MockGetRatesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGetRatesServiceServerMockRecorder
}

// MockGetRatesServiceServerMockRecorder is the mock recorder for MockGetRatesServiceServer.
type MockGetRatesServiceServerMockRecorder struct {
	mock *MockGetRatesServiceServer
}

// NewMockGetRatesServiceServer creates a new mock instance.
func NewMockGetRatesServiceServer(ctrl *gomock.Controller) *MockGetRatesServiceServer {
	mock := &MockGetRatesServiceServer{ctrl: ctrl}
	mock.recorder = &MockGetRatesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRatesServiceServer) EXPECT() *MockGetRatesServiceServerMockRecorder {
	return m.recorder
}

// GetRates mocks base method.
func (m *MockGetRatesServiceServer) GetRates(arg0 context.Context, arg1 *protomodel.RatesRequest) (*protomodel.RatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRates", arg0, arg1)
	ret0, _ := ret[0].(*protomodel.RatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRates indicates an expected call of GetRates.
func (mr *MockGetRatesServiceServerMockRecorder) GetRates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRates", reflect.TypeOf((*MockGetRatesServiceServer)(nil).GetRates), arg0, arg1)
}

// mustEmbedUnimplementedGetRatesServiceServer mocks base method.
func (m *MockGetRatesServiceServer) mustEmbedUnimplementedGetRatesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGetRatesServiceServer")
}

// mustEmbedUnimplementedGetRatesServiceServer indicates an expected call of mustEmbedUnimplementedGetRatesServiceServer.
func (mr *MockGetRatesServiceServerMockRecorder) mustEmbedUnimplementedGetRatesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGetRatesServiceServer", reflect.TypeOf((*MockGetRatesServiceServer)(nil).mustEmbedUnimplementedGetRatesServiceServer))
}

// MockUnsafeGetRatesServiceServer is a mock of UnsafeGetRatesServiceServer interface.
type MockUnsafeGetRatesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGetRatesServiceServerMockRecorder
}

// MockUnsafeGetRatesServiceServerMockRecorder is the mock recorder for MockUnsafeGetRatesServiceServer.
type MockUnsafeGetRatesServiceServerMockRecorder struct {
	mock *MockUnsafeGetRatesServiceServer
}

// NewMockUnsafeGetRatesServiceServer creates a new mock instance.
func NewMockUnsafeGetRatesServiceServer(ctrl *gomock.Controller) *MockUnsafeGetRatesServiceServer {
	mock := &MockUnsafeGetRatesServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGetRatesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGetRatesServiceServer) EXPECT() *MockUnsafeGetRatesServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGetRatesServiceServer mocks base method.
func (m *MockUnsafeGetRatesServiceServer) mustEmbedUnimplementedGetRatesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGetRatesServiceServer")
}

// mustEmbedUnimplementedGetRatesServiceServer indicates an expected call of mustEmbedUnimplementedGetRatesServiceServer.
func (mr *MockUnsafeGetRatesServiceServerMockRecorder) mustEmbedUnimplementedGetRatesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGetRatesServiceServer", reflect.TypeOf((*MockUnsafeGetRatesServiceServer)(nil).mustEmbedUnimplementedGetRatesServiceServer))
}
