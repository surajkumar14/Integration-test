// Code generated by MockGen. DO NOT EDIT.
// Source: aerospike_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAerospikeClient is a mock of AerospikeClient interface.
type MockAerospikeClient struct {
	ctrl     *gomock.Controller
	recorder *MockAerospikeClientMockRecorder
}

// MockAerospikeClientMockRecorder is the mock recorder for MockAerospikeClient.
type MockAerospikeClientMockRecorder struct {
	mock *MockAerospikeClient
}

// NewMockAerospikeClient creates a new mock instance.
func NewMockAerospikeClient(ctrl *gomock.Controller) *MockAerospikeClient {
	mock := &MockAerospikeClient{ctrl: ctrl}
	mock.recorder = &MockAerospikeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAerospikeClient) EXPECT() *MockAerospikeClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAerospikeClient) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAerospikeClientMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAerospikeClient)(nil).Delete))
}

// Get mocks base method.
func (m *MockAerospikeClient) Get(binName string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", binName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAerospikeClientMockRecorder) Get(binName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAerospikeClient)(nil).Get), binName)
}

// Put mocks base method.
func (m *MockAerospikeClient) Put(binName string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", binName, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockAerospikeClientMockRecorder) Put(binName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockAerospikeClient)(nil).Put), binName, value)
}
